@inject SharedLocalizationService Localizer
@using Microsoft.AspNetCore.Builder
@using Microsoft.Extensions.Options

@inject IOptions<RequestLocalizationOptions> LocOptions

@{
    var cultureItems = LocOptions.Value.SupportedUICultures
                                    .ToList();
}
@section head{
    <style>
        .langdata {
            padding: 10px;
        }
    </style>
}
<nav id="main-nav" class="main-nav">
    <ul class="menu">


        <li class="@Html.Active("Home","Index")"><a asp-controller="Home" asp-action="Index">@Localizer.GetLocalizedHtmlString(RESOURCEKEYS.Home)</a></li>
        <li class="@Html.Active("About","Index")"><a asp-controller="About" asp-action="Index">@Localizer.GetLocalizedHtmlString(RESOURCEKEYS.About)</a></li>
        <li class="@Html.Active("Services","Index")">
            <a href="/Services/Index">@Localizer.GetLocalizedHtmlString(RESOURCEKEYS.Services)</a>
            @await Component.InvokeAsync("ServiceMenu")
        </li>

        <li class="@Html.Active("Portfolio","Index")"><a asp-controller="Portfolio" asp-action="Index">@Localizer.GetLocalizedHtmlString(RESOURCEKEYS.Portfolio)</a></li>
        <li class="@Html.Active("Blog","Index")"><a asp-controller="Blog" asp-action="Index">@Localizer.GetLocalizedHtmlString(RESOURCEKEYS.Blog)</a></li>
        <li class="@Html.Active("Message","Index")"><a asp-controller="Message" asp-action="Index">@Localizer.GetLocalizedHtmlString(RESOURCEKEYS.Contact)</a></li>

        @foreach (var item in cultureItems)
        {
            <li class="@Html.LanguageA("Language","SetLanguage",item.Name)" >
                <a class="datas_item langdata" data-id="@item.Name" >
                    <input class="contexts" type="hidden" data-id="@Context.Request.Path" />@item.NativeName.Substring(0, 2).ToUpper()
                </a>
            </li>
        }
    </ul>
</nav>

